import Heading from "components/Heading";
import Wrapper from "components/Wrapper";
import Head from "next/head";
import * as Contentful from "contentful";
import Tag from "components/Tag";
import ProjectName from "components/ProjectName";
import ProjectTags from "components/ProjectTags";
import Spacer from "components/Spacer";
import Project from "components/Project";
import { Fragment } from "react";

interface Tag {
  name: Contentful.EntryFields.Text;
}

interface Project {
  name: Contentful.EntryFields.Text;
  challenges: Contentful.EntryFields.Text[];
  tags: Contentful.Entry<Tag>[];
}

interface Content {
  title: Contentful.EntryFields.Text;
  projects: Contentful.Entry<Project>[];
  tags: Contentful.Entry<Tag>[];
}

export default function Projects({ title, projects, tags }: Content) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Wrapper>
        <Heading>My work</Heading>
        <div className="flex flex-wrap gap-5">
          {tags.map((tag) => (
            <Tag key={tag.sys.id}>{tag.fields.name}</Tag>
          ))}
        </div>
        {projects.map((project, i) => (
          <Fragment key={project.sys.id}>
            <Project
              name={project.fields.name}
              tags={Array.from(project.fields.tags, (tag) => {
                return tag.fields.name;
              })}
              challenges={project.fields.challenges}
            />
            {i != projects.length - 1 && <Spacer />}
          </Fragment>
        ))}
      </Wrapper>
    </>
  );
}

export async function getServerSideProps() {
  const client = Contentful.createClient({
    space: process.env.CONTENTFUL_SPACE_ID,
    accessToken: process.env.CONTENTFUL_CONTENT_DELIVERY_TOKEN,
  });

  const { fields } = await client.getEntry<Content>("1C4XJ83o8F1o8rT0qAi5y9", {
    include: 2,
  });

  const { items: tags } = await client.getEntries<Tag>({
    content_type: "tag",
  });

  return {
    props: {
      title: fields.title,
      projects: fields.projects,
      tags,
    },
  };
}
